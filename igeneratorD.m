%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%% igeneratorD.m %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% compute the set of integer distribution directions, which is the set 
% of permuted coordinate directions, the set produced by usequence, or
% a combination of them
%
% input
%      xbest % the best point found so far
%      ni    % the number of integer variables
%      MA    % 
%      itune % the data struture for MAES
%      info  % the data struture with required information to compute D
%
% output
%       MA   % the data struture for MAES with updated D 

function MA = igeneratorD(xbest,ni,MA,itune,info)
% possibly change in the set of distribution directions
soldet=info.soldet;
pinit = xbest(info.iI)-info.xbest0i(info.iI);
normpinit = norm(pinit,inf);
changDi = (normpinit==0);
if ~changDi 
   MA.int.pinit = pinit;
   MA.int.pinit = ceil(itune.sc*MA.int.pinit/normpinit);
   if MA.int.kappa<itune.ikmax, MA.int.kappa=MA.int.kappa+1;
   else, MA.int.kappa=2;
   end
   % call usequence to compute D
   MA.int.D = ...
     usequence(ni,itune.ilambda,MA.int.kappa*ones(ni,1),MA.int.pinit,soldet);
   MA.int.s = zeros(ni, 1); MA.int.M = eye(ni);
else  % use iusequence 
    MA.int.kappa = 1;
   if itune.ilambda<=ni % D is a set of permuted coordinate directions
       MA.int.D = eye(ni,itune.ilambda);
       perm     = randperm(itune.ilambda);
       MA.int.D = MA.int.D(:,perm);
   else
       ii=0;
       while ii<10 % try to avoid zero directions if possible
            ii=ii+1;
            MA.int.pinit = randi([-5,5],ni,1);
            if norm(MA.int.pinit)~=0, break; end
       end
       if itune.ilambda==2*ni
            % D is a set of permuted coordinate directions
            MA.int.D   = [eye(ni,ni) -eye(ni,ni)];
            perm       = randperm(2*ni);
            MA.int.D   = MA.int.D(:,perm);
       elseif itune.ilambda>2*ni
          % D is a combination set of permuted coordinate
          % directions and a set generated by usequence
          MA.int.D =  [eye(ni,ni) -eye(ni,ni) usequence(ni,...
                         itune.ilambda,MA.int.kappa*ones(ni,1),...
                                                       MA.int.pinit,0)];
          perm     = randperm(itune.ilambda);
          MA.int.D = MA.int.D(:,perm);
       else
          % D is a combination set of coordinate directions and a set
          % generated by usequence 
          MA.int.D = [eye(ni,ni) usequence(ni,itune.ilambda,...
                      MA.int.kappa*ones(ni,1),MA.int.pinit,0)]; 
          perm     = randperm(itune.ilambda);
          MA.int.D = MA.int.D(:,perm);
       end
   end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  